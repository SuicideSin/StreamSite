#! /bin/bash
# StreamSite: Livestream a website via the command line
# (c) 2016 Rolando Islas - https://www.rolandoislas.com
#
# This file is part of StreamSite.
#
# StreamSite is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# StreamSite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with StreamSite.  If not, see <http://www.gnu.org/licenses/>.

function displayHelp {
	echo "StreamSite Help"
	echo
	echo "Usage: streamsite <url> <rtmp> [options]"
	echo
	echo "   <url>			URL of webpage to load"
	echo "   <rtmp>			RTMP ingest server"
	echo
	echo "Options:"
	echo "   -width-website <pixels>	Set the width of website viewport"
	echo "   -height-website <pixels>	Set the height of website viewport"
	echo "   -v				Enable verbose logging"
	echo "   -delay <seconds>		Seconds between screenshots"
	echo "   -dir <path>			Working directory"
	echo "   -reload			Reload page after every render"
	echo "   -format <ext>		Picture format based on extension"
	echo "   -background <color>		Set HTML body background color"
	echo "   -fps <fps>			Set fps of stream"
	echo "   -keyint <keyint>		Set keyint"
	echo "   -audio-bitrate <bitrate>	Set audio bitrate"
	echo "   -video-bitrate <bitrate>	Set video bitrate"
	echo "   -width-video <pixels>	Set width of output video"
	echo "   -height-video <pixels> 	Set height of output video"
}

requiredArgs=2

i=1
for arg in "$@"; do
	nextIndex=($((i+1)))
	param=${!nextIndex}
	case $arg in
		-width-website)
			widthWebsite=$param
			;;
		-height-website)
			heightWebsite=$param
			;;
		-v)
			verbose=true
			;;
		-delay)
			delay=$param
			;;
		-dir)
			directory=$param
			;;
		-reload)
			reload=true
			;;
		-format)
			format=$param
			;;
		-background)
			background=$param
			;;
		-fps)
			fps=$param
			;;
		-keyint)
			keyint=$param
			;;
		-bitrate-audio)
			bitrateAudio=$param
			;;
		-bitrate-video)
			bitrateVideo=$param
			;;
		-width-video)
			widthVideo=$param
			;;
		-height-video)
			heightVideo=$param
			;;
	esac
	if [[ $arg == "-"* ]] && [ $i -le $requiredArgs ]; then
		displayHelp
		exit 1
	fi
	((i++))
done

if [ -z "$widthWebsite" ]; then
	widthWebsite=1920
fi
if [ -z "$heightWebsite" ]; then
	heightWebsite=1080
fi
if [ -z "$verbose" ]; then
	verbose=false
fi
if [ -z "$delay" ]; then
	delay=5
fi
if [ -z "$directory" ]; then
	directory=\.
fi
if [ -z "$reload" ]; then
	reload=false
fi
if [ -z "$format" ]; then
	format=jpg
fi
if [ -z "$background" ]; then
	background=transparent
fi
if [ -z "$fps" ]; then
	fps=1
fi
if [ -z "$keyint" ]; then
	keyint=2
fi
if [ -z "$bitrateAudio" ]; then
	bitrateAudio=96k
fi
if [ -z "$bitrateVideo" ]; then
	bitrateVideo=2500k
fi
if [ -z "$widthVideo" ]; then
	widthVideo=1920
fi
if [ -z "$heightVideo" ]; then
	heightVideo=1080
fi

url=$1
rtmp=$2

if [ -z "$url" ] || [ -z "$rtmp" ]; then
	displayHelp
	exit 1
fi

function clean {
	kill $(jobs -p)
	rm screenshot.$phantomid.$format
}

trap clean EXIT

cd $directory

# Start the screenshot worker
phantomjs --ssl-protocol=any /etc/streamsite/capture.js $url $delay $widthWebsite $heightWebsite $verbose $reload $format $background &
phantomid=$!

# Wait for first screenshot to be rendered
echo Getting first screenshot
while [ ! -f screenshot.$phantomid.$format ]; do
	sleep 1
done

# Frank, I have a monster that might rival yours.
ffmpeg -re -loop 1 -i screenshot.$phantomid.$format -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -c:v libx264 -b:v $bitrateVideo -pix_fmt yuv420p -preset veryfast -c:a libmp3lame -b:a $bitrateAudio -r $fps -x264-params keyint=$keyint:no-scenecut=1 -vf scale=$widthVideo:$heightVideo -f flv $rtmp &

while true; do
	sleep 5
done

